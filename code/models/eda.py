# -*- coding: utf-8 -*-
"""EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MRGWPjRimymdY7yERBE7ndpoZaQfXUjO
"""
import pickle

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import joblib
import os

BASE_PATH = os.getenv('PROJECTPATH')


# This function returns the dataframe with encoded features
# @param dataframe - initial DataFrame
# @param features_names - names of features (columns) that need to be encoded
# @param encoder - encoder that should be used
# @return new_dataframe - new DataFrame with encoded features

def encode_features_one_hot(dataframe, features_names, encoder):
    new_features = encoder.transform(dataframe[features_names])
    new_columns_df = pd.DataFrame(new_features, columns=encoder.get_feature_names_out(features_names))
    dataframe.reset_index(drop=True, inplace=True)

    new_columns_df.reset_index(drop=True, inplace=True)
    new_dataframe = pd.concat([dataframe, new_columns_df], axis=1)
    new_dataframe.drop(features_names, axis=1, inplace=True)
    return new_dataframe


def preprocess_data(X, y = None):
    # Encoding features
    encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')
    print('X in encoder', X.head())

    # Select columns that should be encoded (values are not numbers)
    features_names = list(X.select_dtypes(exclude='number').columns)
    print(features_names)

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
    encoder.fit(X_train[features_names])
    print('Columns with missing values in data: ', list(X_train.columns[X_train.isnull().any()]))
    X_train = encode_features_one_hot(X_train, features_names, encoder)
    X_test = encode_features_one_hot(X_test, features_names, encoder)
    scaler = MinMaxScaler()
    scaler.fit(X_train)
    X_train = pd.DataFrame(scaler.transform(X_train), columns = X_train.columns)
    X_test = pd.DataFrame(scaler.transform(X_test), columns = X_test.columns)
    return X_train, X_test, y_train, y_test, encoder, scaler


if __name__ == '__main__':
    data = pd.read_csv(f'{BASE_PATH}/code/datasets/car_data.csv')
    data.head()

    X = data.drop(['Car_Name', 'Selling_Price'], axis=1)
    y = data['Selling_Price']
    print(data.columns)


    print('hello')
    X_train, X_test, y_train, y_test, encoder, scaler = preprocess_data(X, y)
    print(X_train)
    print('Columns with missing values in data: ', list(X_train.columns[X_train.isnull().any()]))
    print('Columns with missing values in data: ', list(X_test.columns[X_train.isnull().any()]))


    # Scaling data


    # Apply the scaler on both train and test features
    # X_train = pd.DataFrame(scaler.transform(X_train), columns = X_train.columns)
    # X_test = pd.DataFrame(scaler.transform(X_test), columns = X_test.columns)
    # X_test

    # Create a model
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Predict the values
    y_pred = model.predict(X_test)

    # Calculate the error
    error = mean_squared_error(y_test, y_pred)
    print('Mean squared error: ', error)
    r2 = r2_score(y_test, y_pred)
    print('R2 score: ', r2)
    filename = f'{BASE_PATH}/models/model.pkl'
    pickle.dump(model, open(filename, 'wb'))


    scaler_filename = f"{BASE_PATH}/models/scaler.save"
    joblib.dump(scaler, scaler_filename) 

    encoder_filename = f"{BASE_PATH}/models/encoder.save"
    joblib.dump(encoder, encoder_filename) 